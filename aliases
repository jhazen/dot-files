alias vs='vagrant status'
alias vu='vagrant up'
alias vd='vagrant destroy'
alias vss='vagrant ssh'
alias vh='vagrant halt'
alias vr='vagrant rdp'
alias mvdeploy='mvn clean package wildfly:deploy'
alias mvundeploy='mvn wildfly:undeploy'
alias mcp='mvn clean package'
alias vi='vim'
alias gf='git fetch'
alias grm='git rm'
alias gs='git status'
alias gb='git branch'
alias gd='git diff --color'
alias gdt='git difftool'
alias gc='git clone'
alias gconf='git config'
alias ginit='git init'
alias greset='git reset'
alias gst='git stash'
alias gch='git checkout'
alias gr='git remote -v'
alias gm='git merge'
alias gmt='git mergetool'
alias gl='git log --oneline --decorate --color --graph'
alias gc='git commit'
alias gp='git pull'
alias gP='git push'
alias ga='git add'
alias fabric='fab -H $H'
alias jbc='$JBOSS_HOME/bin/jboss-cli.sh -c $JBOSS_URL'
title() {
  echo -ne "\e]0;$1\a"
}
jbctl() {
  case $1 in
    version)
      jbc --version
      ;;
    start)
      nohup $JBOSS_HOME/bin/domain.sh > /dev/null 2>&1 &
      ;;
    stop)
      jbc --command="shutdown --host=$2" || echo "\n\njbctl stop <node name>\n"
      ;;
    restart)
      jbc --command="shutdown --host=$2"
      nohup $JBOSS_HOME/bin/domain.sh > /dev/null 2>&1 &
      ;;
    sgrestart)
      jbc --command="/server-group=`echo -e $2`:restart-servers()" || echo "\n\njbctl sgrestart <server group>\n"
      ;;
    phist)
      jbc --command="patch history --host=$2" || echo "\n\njbctl phist <node name>"
      ;;
    lsservers)
      jbc --command="ls -l /host"
      ;;
    status)
      ps aux | grep jboss | grep -v grep > /dev/null 2>&1 && echo "Running" || echo "Not Running"
      ;;
    tail)
      tail -f $JBOSS_HOME/domain/log/host-controller.log
      ;;
    less)
      less $JBOSS_HOME/domain/log/host-controller.log
      ;;
    lsdeploy)
      jbc --command="deployment-info --server-group=$2" || echo "\n\njbctl lsdeploy <server group>\n"
      ;;
    tksnap)
      jbc --command=":take-snapshot"
      ;;
    lssnap)
      jbc --command=":list-snapshots"
      ;;
    rmsnap)
      jbc --command=":delete-snapshot(name=$2)" || echo "\n\njbctl rmsnap <snapshot name>"
      ;;
    deploy)
      jbc --command="deploy $2 --server-groups=$3"
      ;;
    undeploy)
      jbc --command="undeploy $2 --all-relevant-server-groups"
      ;;
    cmd)
      jbc
      ;;
    home)
      echo "JBOSS_HOME is set to: $JBOSS_HOME"
      ;;
    hist)
      cat ~/.jboss-cli-history
      ;;
    *)
      echo "jbctl (command) <arguments>"
      echo "version 1.2"
      echo
      echo -e "COMMAND\t\tPURPOSE\t\t\tARGUMENTS\t\tEXAMPLE"
      echo -e "version\t\tCheck version\t\tn/a\t\t\tjbctl version"
      echo -e "hist\t\tCLI history\t\tn/a\t\t\tjbctl hist"
      echo -e "cmd\t\tOpen CLI\t\tn/a\t\t\tjbctl cmd"
      echo -e "start\t\tStart JBoss\t\tn/a\t\t\tjbctl start"
      echo -e "stop\t\tStop JBoss\t\tServer name\t\tjbctl stop work-s01"
      echo -e "restart\t\tRestart JBoss\t\tServer name\t\tjbctl restart work-s01"
      echo -e "home\t\tDisplay JBoss home\tn/a\t\t\tjbctl home"
      echo -e "lssnap\t\tDisplay snaps\t\tn/a\t\t\tjbctl lssnap"
      echo -e "tksnap\t\tTake snapshot\t\tn/a\t\t\tjbctl tksnap"
      echo -e "rmsnap\t\tDelete snap\t\tSnapshot name\t\tjbctl rmsnap 20150810-221949391domain.xml"
      echo -e "lsdeploy\tDisplay deployments\tServer group\t\tjbctl lsdeploy sg01"
      echo -e "deploy\t\tDeploy artifact\t\tArtifact, Server group\tjbctl deploy myapp.war sg01"
      echo -e "undeploy\tUndeploy artifact\tArtifact\t\tjbctl undeploy myapp.war"
      echo -e "less\t\tOpen log in less\tn/a\t\t\tjbctl less"
      echo -e "tail\t\tTail -f log\t\tn/a\t\t\tjbctl tail"
      echo -e "status\t\tCheck running state\tn/a\t\t\tjbctl status"
      echo -e "lsservers\tList servers in domain\tn/a\t\t\tjbctl lsservers"
      echo -e "phist\t\tShow patch history\tServer name\t\tjbctl phist work-s01"
      echo -e "sgrestart\tRestart a server group\tServer group\t\tjbctl sgrestart sg01"
      echo
      ;;
  esac
}
sshrun() {
    for i in `echo $H | sed 's/,/\n/g'`; do echo $i; ssh $i "$1"; echo; done
}
alias ll='ls -l'
alias la='ls -la'
alias lh='ls -lh'
alias ltr='ls -ltr'
alias psg='ps aux | grep'
dynamodbctl() {
    if [ $# -ne 1 ]; then
        echo "Usage dynamodbctl <start|stop|status>"
    fi
    cd ~/.dynamodb
    case $1 in
        start) java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb -dbPath . & 2>&1 >> server.log;;
        stop) ps aux | grep DynamoDBLocal | grep -v grep | awk '{print $2}' | xargs kill;;
        status) ps aux | grep DynamoDBLocal | grep -v grep 2>&1 > /dev/null && echo "Running" || echo "Not running";;
        *) echo "Usage dynamodbctl <start|stop|status>" && exit 1;;
    esac
    cd - > /dev/null
}
flaskctl() {
    if [ $# -ne 1 ]; then
        echo "Usage flaskctl <start|stop|restart|status>"
    fi
    cd ~/.flask/
    case $1 in
        start) ./app.py &;;
        stop) ps aux | grep "python ./app.py" | grep -v grep | awk '{print $2}' | xargs kill > /dev/null;;
        status) ps aux | grep "python ./app.py" | grep -v grep 2>&1 > /dev/null && echo "Running" || echo "Not running";;
        restart) ps aux | grep "python ./app.py" | grep -v grep | awk '{print $2}' | xargs kill && ./app.py &;;
        *) echo "Usage flaskctl <start|stop|status>" && exit 1;;
    esac
    cd - > /dev/null
}
